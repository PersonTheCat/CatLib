
architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath.set file("src/main/resources/catlib.accesswidener")
}

configurations {
    developmentFabric.extendsFrom common
}

repositories {
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://maven.terraformersmc.com/' }
    maven { url 'https://maven.terraformersmc.com/releases/' }
}

dependencies {
    common(project(path: ":common", configuration: "namedElements")){
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: 'transformProductionFabric')){
        transitive = false
    }
    modImplementation "net.fabricmc:fabric-loader:$loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:$fabric_version"
    modApi "com.terraformersmc:modmenu:$mod_menu_version"
    modApi("me.shedaniel.cloth:cloth-config-fabric:$cloth_version") {
        exclude group: 'net.fabricmc.fabric-api'
    }

    testImplementation project(path: ":common", configuration: 'transformProductionFabric')
}

processResources {
    filesMatching(['fabric.mod.json']) {
        expand project.properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    exclude "catlib.common.accessWidener"
    archiveClassifier.set "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set 'dev'
}

test {
    mkdir file("$projectDir/runTest")
    workingDir = file("$projectDir/runTest")
}