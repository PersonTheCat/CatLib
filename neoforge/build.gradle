
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge {
        platformPackage = "neo"
    }
}

loom {
    neoForge {}

    mods {
        // force this mod onto the classpath since for some reason arch misses it
        forge {
            sourceSet sourceSets.main
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url 'https://maven.neoforged.net/releases/' }
}

dependencies {
    shadowCommon(project(path: ':common', configuration: 'transformProductionNeoForge')) {
        transitive = false
    }
    common(project(path: ':common', configuration: 'namedElements')) {
        transitive = false
    }
    forgeRuntimeLibrary group: 'com.personthecat', name: 'fastnoise', version: fastnoise_version
    forgeRuntimeLibrary group: 'com.personthecat', name: 'fresult', version: fresult_version
    forgeRuntimeLibrary group: 'org.exjson', name: 'xjs-data', version: xjs_data_version
    forgeRuntimeLibrary group: 'org.exjson', name: 'xjs-compat', version: xjs_compat_version
    neoForge "net.neoforged:neoforge:$neo_version"
}

compileJava {
    dependsOn project(':common').getTasksByName('remapJar', false)
}

processResources {
    filesMatching(['META-INF/neoforge.mods.toml', 'pack.mcmeta']) {
        expand project.properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": mod_vendor,
            "Specification-Version": mod_version,
            "Implementation-Title": mod_id,
            "Implementation-Version": mod_version,
            "Implementation-Vendor": mod_vendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    archiveClassifier.set 'dev'
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}