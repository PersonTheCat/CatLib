import org.apache.tools.ant.filters.ReplaceTokens
import personthecat.overwritevalidator.OverwriteValidator

buildscript {
    repositories {
        maven { url = "https://jitpack.io" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.github.PersonTheCat', name: 'OverwriteValidator', version: '1.8'
        classpath group: 'gradle.plugin.com.github.jengelman.gradle.plugins', name: 'shadow', version: '7.0.0'
    }
}

plugins {
    id 'architectury-plugin' version "$architectury_version"
    id 'dev.architectury.loom' version "$architectury_loom_version" apply false
}

architectury {
    minecraft = mc_version
}

allprojects {
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: OverwriteValidator

    version = mod_version

    repositories {
        // More convenient access to CF mods.
        maven { url 'https://www.cursemaven.com' }

        // So we can conveniently read dependencies from GH.
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }

    configurations {
        bundle { transitive = false }
        implementation.extendsFrom bundle
    }

    dependencies {
        bundle group: 'com.github.PersonTheCat', name: 'FastNoise', version: '0.8'
        bundle group: 'com.github.PersonTheCat', name: 'FResult', version: '2.0-BETA-5'
        bundle group: 'com.github.PersonTheCat', name: 'hjson-java', version: '3.0.0-C5'

        compileOnly group: 'com.github.PersonTheCat', name: 'OverwriteValidatorAnnotations', version: '1.4'
        compileOnly group: 'org.jetbrains', name: 'annotations', version: '16.0.2'
        compileOnly group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
        compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.+'
        testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.+'
        testImplementation group: 'org.jetbrains', name: 'annotations', version: '16.0.2'
    }

    task processSource(type: Sync) {
        from sourceSets.main.java
        inputs.properties(mod_version: mod_version, mod_id: mod_id, mod_name: mod_name)
        filesMatching(['**/LibReference.java']) {
            filter(ReplaceTokens, tokens: [MOD_VERSION: mod_version, MOD_ID: mod_id, MOD_NAME: mod_name])
        }
        into "$buildDir/src"
    }

    compileJava {
        source = processSource.outputs
        options.compilerArgs << '-parameters'
    }

    jar {
        archivesBaseName = "$archive_base-$platform"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    shadowJar {
        configurations = [project.configurations.bundle]
        classifier = ''
    }

    build.dependsOn shadowJar

    tasks.withType(Test) {
        useJUnitPlatform()
        ignoreFailures = false
        failFast = true
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}
