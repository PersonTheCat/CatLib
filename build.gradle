import personthecat.buildtools.OverwriteValidator

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'local.personthecat', name: 'gradle-plugin'
    }
}

plugins {
    id 'architectury-plugin' version "$architectury_version"
    id 'dev.architectury.loom' version "$architectury_loom_version" apply false
}

architectury {
    minecraft = mc_version
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: OverwriteValidator

    version = mod_version

    repositories {
        // So we can conveniently read dependencies from GH.
        maven { url = 'https://jitpack.io' }
        mavenCentral()
    }

    configurations {
        bundle
        implementation.extendsFrom bundle
    }

    dependencies {
        bundle group: 'com.github.PersonTheCat', name: 'hjson-java', version: '3.0.0-C2'
        bundle group: 'com.github.PersonTheCat', name: 'FResult', version: '2.0-BETA-3'

        implementation group: 'org.jetbrains', name: 'annotations', version: '16.0.2'
        implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'
        implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

        compileOnly group: 'local.personthecat', name: 'gradle-plugin'
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.20'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.20'

        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1'
        testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.1'
    }

    jar {
        from {
            // Todo: why is javax bundled?
            if (it.name.contains("javax") || it.name.contains("jsr305")) return null
            configurations.bundle.collect { it.isDirectory() ? it : zipTree(it) }
        }
        archivesBaseName = "$archive_base-$platform"
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        ignoreFailures = false
        failFast = true
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}
