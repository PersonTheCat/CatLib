
plugins {
    id 'maven-publish'
    id 'signing'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    commonImplementation
    compileClasspath.extendsFrom commonImplementation
    runtimeClasspath.extendsFrom commonImplementation
    developmentFabric.extendsFrom commonImplementation
}

dependencies {
    bundle(project(path: "$common", configuration: 'transformProductionFabric')) {
        transitive = false
    }
    commonImplementation(project(path: "$common", configuration: "namedElements")) {
        transitive = false
    }

    modImplementation "net.fabricmc:fabric-loader:$loader_version"
    modApi "net.fabricmc.fabric-api:fabric-api:$fabric_version"
    modApi "curse.maven:ClothConfig-319057:$cloth_maven_version"
}

processResources {
    filesMatching(['**/fabric.mod.json']) {
        expand project.properties
    }
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier 'remapped'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    classifier 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.findProperty('ossrh.username') ?: System.getenv('OSSRH_USERNAME')
                password = project.findProperty('ossrh.password') ?: System.getenv('OSSRH_PASSWORD')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = pom_artifact_id
            version = version

            pom {
                name = pom_name
                description = pom_description
                url = pom_url
                licenses {
                    license {
                        name = pom_license_name
                        url = pom_license_url
                    }
                }
                developers {
                    developer {
                        id = pom_developer
                        name = pom_developer_name
                        email = pom_developer_email
                    }
                }
                scm {
                    connection = pom_scm_connection
                    developerConnection = pom_scm_developer_connection
                    url = pom_scm_url
                }
            }

            from components.java
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}