
plugins {
    id 'maven-publish'
    id 'signing'
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        accessTransformer 'src/main/resources/META-INF/accesstransformer.cfg'
        mixinConfig 'catlib.forge.mixins.json'
        mixinConfig 'catlib.common.mixins.json'
    }
}

configurations {
    commonImplmementation
    compileClasspath.extendsFrom commonImplementation
    runtimeClasspath.extendsFrom commonImplementation
    developmentForge.extendsFrom commonImplementation
}

dependencies {
    bundle(project(path: "$common", configuration: 'transformProductionForge')) {
        transitive = false
    }
    commonImplementation(project(path: "$common", configuration: "namedElements")) {
        transitive = false
    }

    forge "net.minecraftforge:forge:$mc_version-$forge_version"
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": mod_vendor,
            "Specification-Version": mod_version,
            "Implementation-Title": mod_id,
            "Implementation-Version": mod_version,
            "Implementation-Vendor": mod_vendor,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    filesMatching(['**/mods.toml', '**/pack.mcmeta']) {
        expand project.properties
    }
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier 'remapped'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    javadoc.options.addStringOption('Xdoclint:none', '-quiet')
    classifier 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    duplicatesStrategy DuplicatesStrategy.INCLUDE
    classifier 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    repositories {
        maven {
            name = 'OSSRH'
            url = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = project.findProperty('ossrh.username') ?: System.getenv('OSSRH_USERNAME')
                password = project.findProperty('ossrh.password') ?: System.getenv('OSSRH_PASSWORD')
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            groupId = group
            artifactId = pom_artifact_id
            version = version

            pom {
                name = pom_name
                description = pom_description
                url = pom_url
                licenses {
                    license {
                        name = pom_license_name
                        url = pom_license_url
                    }
                }
                developers {
                    developer {
                        id = pom_developer
                        name = pom_developer_name
                        email = pom_developer_email
                    }
                }
                scm {
                    connection = pom_scm_connection
                    developerConnection = pom_scm_developer_connection
                    url = pom_scm_url
                }
            }

            from components.java
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}