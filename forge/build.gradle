
architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        accessTransformer 'src/main/resources/META-INF/accesstransformer.cfg'
        mixinConfig 'catlib.forge.mixins.json'
        mixinConfig 'catlib.common.mixins.json'
    }
}

configurations {
    developmentForge.extendsFrom common
}

dependencies {
    shadowCommon(project(path: ':common', configuration: 'transformProductionForge')){
        transitive = false
    }
    common(project(path: ':common', configuration: 'namedElements')){
        transitive = false
    }
    forgeRuntimeLibrary group: 'com.personthecat', name: 'fastnoise', version: fastnoise_version
    forgeRuntimeLibrary group: 'com.personthecat', name: 'fresult', version: fresult_version
    forgeRuntimeLibrary group: 'org.exjson', name: 'xjs-data', version: xjs_data_version
    forgeRuntimeLibrary group: 'org.exjson', name: 'xjs-compat', version: xjs_compat_version
    modImplementation group: 'curse.maven', name: 'configured-457570', version: configured_maven_version_forge
    forge "net.minecraftforge:forge:$mc_version-$forge_version"
}

processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand project.properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set 'dev'
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}