
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        accessTransformer 'src/main/resources/META-INF/accesstransformer.cfg'
        mixinConfig 'catlib.forge.mixins.json'
        mixinConfig 'catlib.common.mixins.json'
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    shadowCommon(project(path: ':common', configuration: 'transformProductionForge')) {
        transitive = false
    }

    def taskNames = project.gradle.startParameter.taskNames
    // hack to force shadowed libraries onto the forge runtime classpath without mod errors
    // it may be possible to fix this by shadowing the libraries directly here. tbd
    if (taskNames.contains('build')
            || taskNames.contains('publish')
            || taskNames.contains('publishToMavenLocal')) {
        compileClasspath(project(path: ':common', configuration: 'namedElements')) {
            transitive = false
        }
    } else {
        common(project(path: ':common', configuration: 'shadow')) {
            transitive = false
        }
    }

    forge "net.minecraftforge:forge:$mc_version-$forge_version"
}

processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand project.properties
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_name,
                "Specification-Vendor": mod_vendor,
                "Specification-Version": mod_version,
                "Implementation-Title": mod_id,
                "Implementation-Version": mod_version,
                "Implementation-Vendor": mod_vendor,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    classifier 'dev'
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}