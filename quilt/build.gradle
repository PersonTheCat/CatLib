
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    common(project(path: ":common", configuration: "namedElements")) {
        transitive = false
    }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) {
        transitive = false
    }
    common(project(path: ":fabric-like", configuration: "namedElements")) {
        transitive = false
    }
    shadowCommon(project(path: ":fabric-like", configuration: "transformProductionQuilt")) {
        transitive = false
    }
    modImplementation "org.quiltmc:quilt-loader:$quilt_loader_version"
    modCompileOnly "net.fabricmc:fabric-loader:$loader_version"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:$quilt_fabric_api_version"
}

processResources {
    filesMatching("quilt.mod.json") {
        expand project.properties
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}
